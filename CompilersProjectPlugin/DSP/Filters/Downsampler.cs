using System.Runtime.CompilerServices;

namespace CompilersProject
{
    /// <summary>
    /// Фильтр низких частот, используемый для понижения частоты дискретизации.
    /// </summary>
    class Downsampler : AudioComponent
    {
        /// <summary>
        /// Коэффициенты, используемые для понижения частоты дискретизации в 2 раза.
        /// </summary>
        public static double[] X2OversamplingCoefficients = new[]
        {
            0.0000030416222567197833,  8.361952157148288e-7,      -0.000005925094515842721,  -0.000003024729165169841,
            0.000009483783706165421,   0.00000723209777116489,    -0.000013294008492742,     -0.000014155214050509543,
            0.000016607882158558667,   0.000024423989868674373,   -0.000018310088319921986,  -0.00003847376842346738,
            0.000016907497464738733,   0.00005639361908773835,    -0.000010563822308760637,  -0.00007776107488778567,
            -0.0000028102981031513762, 0.00010147838274441141,    0.000025404793602647142,   -0.00012562924128648733,
            -0.000059293195541806884,  0.00014737778555502898,    0.00010615545967462068,    -0.0001629327263678661,
            -0.0001669520856300777,    0.00016759863428288119,    0.00024156870266542192,    -0.0001559330731121642,
            -0.00032845768487997786,   0.00012202253220773863,    0.0004243097138152885,     -0.000059881987314738115,
            -0.0005237927446189893,    -0.00003602718887115699,   0.0006193978212302525,     0.00017017774661556506,
            -0.0007014300326804272,    -0.00034528434925108943,   0.000758178232547994,      0.0005615791001342536,
            -0.0007762888215179651,    -0.000816105367898944,     0.0007413571604539623,     0.001102087938453264,
            -0.0006387355546314502,    -0.0014084413464889038,    0.00045454012826587505,    0.0017194776073926833,
            -0.00017682145879295325,   -0.002014868955070687,     -0.00020315303365908512,   0.002269910418084365,
            0.0006895717046618674,     -0.0024561114384577644,    -0.0012807841502350589,    0.0025421258437818978,
            0.001968123259388613,      -0.0024950065823285024,    -0.00273492701557877,      0.0022817470579166617,
            0.0035558350943221766,     -0.0018710464882201244,    -0.004396418860510098,     0.0012352143112775136,
            0.005213177998999048,      -0.00035211017965926044,   -0.005953902083357598,     -0.0007929967550256986,
            0.006558349766125828,      0.0022057713255015233,     -0.006959139407586607,     -0.003881478361851405,
            0.00708266710912906,       0.005804080215017983,      -0.006849758826814975,     -0.007945855701826782,
            0.006175595973442279,      0.010267603871768961,      -0.004968171703644546,     -0.012719463422626474,
            0.0031240124390668894,     0.015242342217107538,      -0.0005188446412763827,    -0.01776991293146465,
            -0.003011419499901605,     0.020231093909868218,      0.007709504147400423,      -0.02255290059398985,
            -0.013980045763524558,     0.02466352548220426,       0.02258557190829597,       -0.02649548534433017,
            -0.03517923749098369,      0.02798866501937985,       0.05611521692777254,       -0.029093088468055358,
            -0.10149581032176695,      0.029771260001166155,      0.31676011963026557,       0.46999907783956496,
            0.31676011963026557,       0.029771260001166155,      -0.10149581032176695,      -0.029093088468055358,
            0.05611521692777254,       0.02798866501937985,       -0.03517923749098369,      -0.02649548534433017,
            0.02258557190829597,       0.02466352548220426,       -0.013980045763524558,     -0.02255290059398985,
            0.007709504147400423,      0.020231093909868218,      -0.003011419499901605,     -0.01776991293146465,
            -0.0005188446412763827,    0.015242342217107538,      0.0031240124390668894,     -0.012719463422626474,
            -0.004968171703644546,     0.010267603871768961,      0.006175595973442279,      -0.007945855701826782,
            -0.006849758826814975,     0.005804080215017983,      0.00708266710912906,       -0.003881478361851405,
            -0.006959139407586607,     0.0022057713255015233,     0.006558349766125828,      -0.0007929967550256986,
            -0.005953902083357598,     -0.00035211017965926044,   0.005213177998999048,      0.0012352143112775136,
            -0.004396418860510098,     -0.0018710464882201244,    0.0035558350943221766,     0.0022817470579166617,
            -0.00273492701557877,      -0.0024950065823285024,    0.001968123259388613,      0.0025421258437818978,
            -0.0012807841502350589,    -0.0024561114384577644,    0.0006895717046618674,     0.002269910418084365,
            -0.00020315303365908512,   -0.002014868955070687,     -0.00017682145879295325,   0.0017194776073926833,
            0.00045454012826587505,    -0.0014084413464889038,    -0.0006387355546314502,    0.001102087938453264,
            0.0007413571604539623,     -0.000816105367898944,     -0.0007762888215179651,    0.0005615791001342536,
            0.000758178232547994,      -0.00034528434925108943,   -0.0007014300326804272,    0.00017017774661556506,
            0.0006193978212302525,     -0.00003602718887115699,   -0.0005237927446189893,    -0.000059881987314738115,
            0.0004243097138152885,     0.00012202253220773863,    -0.00032845768487997786,   -0.0001559330731121642,
            0.00024156870266542192,    0.00016759863428288119,    -0.0001669520856300777,    -0.0001629327263678661,
            0.00010615545967462068,    0.00014737778555502898,    -0.000059293195541806884,  -0.00012562924128648733,
            0.000025404793602647142,   0.00010147838274441141,    -0.0000028102981031513762, -0.00007776107488778567,
            -0.000010563822308760637,  0.00005639361908773835,    0.000016907497464738733,   -0.00003847376842346738,
            -0.000018310088319921986,  0.000024423989868674373,   0.000016607882158558667,   -0.000014155214050509543,
            -0.000013294008492742,     0.00000723209777116489,    0.000009483783706165421,   -0.000003024729165169841,
            -0.000005925094515842721,  8.361952157148288e-7,      0.0000030416222567197833,
        };
        
        /// <summary>
        /// Текущие коэффициенты фильтра.
        /// </summary>
        private double[] coefficients;
        private int coefficientsLength;

        /// <summary>
        /// Циклический буфер, хранящий последние n входных сэмплов.
        /// </summary>
        private double[] buffer;

        /// <summary>
        /// Указывает на индекс для записи в циклический буфер.
        /// </summary>
        private int currBufferIndex = 0;

        /// <summary>
        /// Отношение частоты дискретизации выходного сигнала к входному.
        /// </summary>
        private int order;

        /// <summary>
        /// Отношение частоты дискретизации выходного сигнала к входному.
        /// </summary>
        public int Order
        {
            get => order;
            set
            {
                order = value;
                switch (order)
                {
                    case 1:
                        break;
                    case 2:
                        coefficients = X2OversamplingCoefficients;
                        coefficientsLength = coefficients.Length;
                        buffer = new double[coefficientsLength];
                        break;
                }
            }
        }

        /// <summary>
        /// Обработка новых входных данных.
        /// </summary>
        /// <param name="inputs">Массив, содержащий как минимум <see cref="Order"/> сэмплов.</param>
        /// <returns>Выходной сигнал.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public double Process(params double[] inputs)
        {
            // order - коэффициент, во сколько раз нужно снизить частоту дискретизации
            if (order == 1)
                return inputs[0];

            double res = 0;

            for (int inputIndex = 0; inputIndex < order; ++inputIndex)
            {
                // Заносим сэмпл в буфер.
                buffer[currBufferIndex] = inputs[inputIndex];

                // Оптимизация: фильтруется только первый входной сэмпл, остальные отбрасываются
                if (inputIndex == 0)
                {
                    int index = currBufferIndex;
                    for (int i = 0; i < coefficients.Length; ++i)
                    {
                        res += coefficients[i] * buffer[index];

                        index -= 1;
                        if (index == -1)
                            index = buffer.Length - 1;
                    }
                }

                // Указатель для записи в циклический буфер
                currBufferIndex += 1;
                if (currBufferIndex == buffer.Length)
                    currBufferIndex = 0;
            }

            return res;
        }
    }
}
