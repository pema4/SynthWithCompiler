//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ControlScriptLanguage.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using System.Linq;
    using System;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ControlScriptLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		BooleanConstant=18, DecimalConstant=19, DecimalConstantSuffix=20, Plus=21, 
		Minus=22, Mult=23, Div=24, Mod=25, Not=26, Less=27, LessEqual=28, Greater=29, 
		GreaterEqual=30, Equal=31, NotEqual=32, And=33, Or=34, Xor=35, Assign=36, 
		Return=37, Identifier=38, WhiteSpaces=39, OneLineComments=40, MultipleLineComments=41;
	public const int
		RULE_script = 0, RULE_statement = 1, RULE_statementBlock = 2, RULE_returnStatement = 3, 
		RULE_ifStatement = 4, RULE_whileStatement = 5, RULE_forStatement = 6, 
		RULE_assignableExpression = 7, RULE_primaryExpression = 8, RULE_expression = 9, 
		RULE_assignmentExpression = 10, RULE_arrayDeclaration = 11, RULE_constant = 12;
	public static readonly string[] ruleNames = {
		"script", "statement", "statementBlock", "returnStatement", "ifStatement", 
		"whileStatement", "forStatement", "assignableExpression", "primaryExpression", 
		"expression", "assignmentExpression", "arrayDeclaration", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'for'", "'if'", "'('", "')'", "'else'", "'while'", 
		"'['", "']'", "','", "'+='", "'-='", "'*='", "'/='", "'%='", null, null, 
		null, "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'&'", "'|'", "'^'", "'='", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "BooleanConstant", "DecimalConstant", 
		"DecimalConstantSuffix", "Plus", "Minus", "Mult", "Div", "Mod", "Not", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "Equal", "NotEqual", "And", 
		"Or", "Xor", "Assign", "Return", "Identifier", "WhiteSpaces", "OneLineComments", 
		"MultipleLineComments"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ControlScriptLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ControlScriptLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private System.Collections.Generic.HashSet<string> idTable = new System.Collections.Generic.HashSet<string>();
	    private string Tab(int tabulation) => new string(' ', 4 * tabulation);
	    private string newLine = Environment.NewLine;

		public ControlScriptLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ControlScriptLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _list = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << BooleanConstant) | (1L << DecimalConstant) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Return) | (1L << Identifier))) != 0)) {
				{
				{
				State = 26; _localctx._statement = statement(3);
				_localctx._list.Add(_localctx._statement);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

			            foreach (var line in _localctx._list.Select(x => x.code))
			                System.Console.WriteLine(line);
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public StatementBlockContext sb;
		public StatementBlockContext _statementBlock;
		public ReturnStatementContext _returnStatement;
		public IfStatementContext _ifStatement;
		public WhileStatementContext _whileStatement;
		public ForStatementContext _forStatement;
		public AssignmentExpressionContext _assignmentExpression;
		public ExpressionContext _expression;
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public StatementContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement(Int32 tabulation) {
		StatementContext _localctx = new StatementContext(Context, State, tabulation);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; _localctx.sb = _localctx._statementBlock = statementBlock(_localctx.tabulation);

				            _localctx.code =  _localctx._statementBlock.code;
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; _localctx._returnStatement = returnStatement(_localctx.tabulation);

				            _localctx.code =  _localctx._returnStatement.code;
				        
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40; _localctx._ifStatement = ifStatement(_localctx.tabulation);
				 _localctx.code =  _localctx._ifStatement.code; 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43; _localctx._whileStatement = whileStatement(_localctx.tabulation);
				 _localctx.code =  _localctx._whileStatement.code; 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46; _localctx._forStatement = forStatement(_localctx.tabulation);
				 _localctx.code =  _localctx._forStatement.code; 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 49; _localctx._assignmentExpression = assignmentExpression();
				State = 50; Match(T__0);
				 _localctx.code =  Tab(_localctx.tabulation) + _localctx._assignmentExpression.code + ";"; 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 53; _localctx._expression = expression(0);
				State = 54; Match(T__0);
				 _localctx.code =  Tab(_localctx.tabulation) + _localctx._expression.code + " ;"; 
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 57; Match(T__0);
				 _localctx.code =  Tab(_localctx.tabulation) + ";"; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public StatementContext _statement;
		public IList<StatementContext> _list = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public StatementBlockContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock(Int32 tabulation) {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State, tabulation);
		EnterRule(_localctx, 4, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T__1);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << BooleanConstant) | (1L << DecimalConstant) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Return) | (1L << Identifier))) != 0)) {
				{
				{
				State = 62; _localctx._statement = statement(_localctx.tabulation + 1);
				_localctx._list.Add(_localctx._statement);
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68; Match(T__2);

			            _localctx.code =  Tab(tabulation - 1) + "{" + newLine +
			                    string.Join(System.Environment.NewLine, _localctx._list.Select(x => x.code)) + newLine +
			                    Tab(tabulation - 1) + "}";
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public ExpressionContext _expression;
		public ExpressionContext res;
		public ExpressionContext samples;
		public ITerminalNode Return() { return GetToken(ControlScriptLanguageParser.Return, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement(Int32 tabulation) {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State, tabulation);
		EnterRule(_localctx, 6, RULE_returnStatement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; Match(Return);
				State = 72; _localctx._expression = expression(0);
				State = 73; Match(T__0);

				            _localctx.code =  Tab(tabulation) + "yield return " + _localctx._expression.code + ";";
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(Return);
				State = 77; _localctx.res = _localctx._expression = expression(0);
				State = 78; Match(T__3);
				State = 79; _localctx.samples = _localctx._expression = expression(0);
				State = 80; Match(T__0);

				            _localctx.code =  Tab(_localctx.tabulation) + "_currentValue = " + _localctx.res.code + ";" + newLine + 
				                    Tab(_localctx.tabulation) + "_timer += " + _localctx._expression.code + ";" + newLine +
				                    Tab(_localctx.tabulation) + "while (_timer > 0.5)" + newLine +
				                    Tab(_localctx.tabulation) + "{" + newLine +
				                    Tab(_localctx.tabulation + 1) + "_timer -= 1;" + newLine +
				                    Tab(_localctx.tabulation + 1) + "yield return _currentValue;" + newLine +
				                    Tab(_localctx.tabulation) + "}";
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public ExpressionContext cond;
		public StatementContext a;
		public StatementContext b;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public IfStatementContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement(Int32 tabulation) {
		IfStatementContext _localctx = new IfStatementContext(Context, State, tabulation);
		EnterRule(_localctx, 8, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__4);
			State = 86; Match(T__5);
			State = 87; _localctx.cond = expression(0);
			State = 88; Match(T__6);
			State = 89; _localctx.a = statement(_localctx.tabulation + 1);
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 90; Match(T__7);
				State = 91; _localctx.b = statement(_localctx.tabulation + 1);
				}
				break;
			}

			            _localctx.code =  Tab(_localctx.tabulation) + "if (" + _localctx.cond.code + ") " + newLine +
			                    Tab(_localctx.tabulation) + "{" + newLine +
			                    _localctx.a.code + newLine +
			                    Tab(_localctx.tabulation) + "}";
			            if (_localctx.b != null)
			                _localctx.code += newLine +
			                         Tab(_localctx.tabulation) + "else " + newLine +
			                         Tab(_localctx.tabulation) + "{" + newLine +
			                         _localctx.b.code + newLine +
			                         Tab(_localctx.tabulation) + "}";
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public ExpressionContext cond;
		public StatementContext a;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public WhileStatementContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement(Int32 tabulation) {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State, tabulation);
		EnterRule(_localctx, 10, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(T__8);
			State = 97; Match(T__5);
			State = 98; _localctx.cond = expression(0);
			State = 99; Match(T__6);
			State = 100; _localctx.a = statement(_localctx.tabulation + 1);

			            _localctx.code =  Tab(_localctx.tabulation) + "while (" + _localctx.cond.code + ") " + newLine +
			                    Tab(_localctx.tabulation) + "{" + newLine +
			                    _localctx.a.code + newLine +
			                    Tab(_localctx.tabulation) + "}";
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public Int32 tabulation;
		public String code;
		public AssignmentExpressionContext init;
		public ExpressionContext cond;
		public AssignmentExpressionContext inc;
		public StatementContext a;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ForStatementContext(ParserRuleContext parent, int invokingState, Int32 tabulation)
			: base(parent, invokingState)
		{
			this.tabulation = tabulation;
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement(Int32 tabulation) {
		ForStatementContext _localctx = new ForStatementContext(Context, State, tabulation);
		EnterRule(_localctx, 12, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(T__3);
			State = 104; Match(T__5);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 105; _localctx.init = assignmentExpression();
				}
			}

			State = 108; Match(T__0);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__9) | (1L << BooleanConstant) | (1L << DecimalConstant) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Identifier))) != 0)) {
				{
				State = 109; _localctx.cond = expression(0);
				}
			}

			State = 112; Match(T__0);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 113; _localctx.inc = assignmentExpression();
				}
			}

			State = 116; Match(T__6);
			State = 117; _localctx.a = statement(_localctx.tabulation + 1);

			            var initPart = _localctx.init?.code ?? "";
			            var condPart = _localctx.cond?.code ?? "";
			            var incPart = _localctx.inc?.code ?? "";
			            _localctx.code =  Tab(_localctx.tabulation) + "for (" + initPart + ";" + condPart + ";" + incPart + ") " + newLine +
			                    Tab(_localctx.tabulation) + "{" + newLine +
			                    _localctx.a.code + newLine +
			                    Tab(_localctx.tabulation) + "}"; 
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		public String code;
		public AssignableExpressionContext a;
		public IToken _Identifier;
		public ExpressionContext _expression;
		public ITerminalNode Identifier() { return GetToken(ControlScriptLanguageParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		return assignableExpression(0);
	}

	private AssignableExpressionContext assignableExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, _parentState);
		AssignableExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_assignableExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 121; _localctx._Identifier = Match(Identifier);

			            _localctx.code =  (_localctx._Identifier!=null?_localctx._Identifier.Text:null);
			        
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssignableExpressionContext(_parentctx, _parentState);
					_localctx.a = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_assignableExpression);
					State = 124;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 125; Match(T__9);
					State = 126; _localctx._expression = expression(0);
					State = 127; Match(T__10);

					                      _localctx.code =  _localctx.a.code + "[(int)(" + _localctx._expression.code +")]"; 
					                  
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public String code;
		public PrimaryExpressionContext a;
		public AssignableExpressionContext _assignableExpression;
		public ConstantContext _constant;
		public ArrayDeclarationContext _arrayDeclaration;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _list = new List<ExpressionContext>();
		public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 136; _localctx._assignableExpression = assignableExpression(0);
				 _localctx.code =  _localctx._assignableExpression.code; 
				}
				break;
			case BooleanConstant:
			case DecimalConstant:
				{
				State = 139; _localctx._constant = constant();
				 _localctx.code =  _localctx._constant.code; 
				}
				break;
			case T__9:
				{
				State = 142; _localctx._arrayDeclaration = arrayDeclaration();
				 _localctx.code =  _localctx._arrayDeclaration.code; 
				}
				break;
			case T__5:
				{
				State = 145; Match(T__5);
				State = 146; _localctx._expression = expression(0);
				State = 147; Match(T__6);

				            _localctx.code =  "(" + _localctx._expression.code + ")";
				        
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryExpressionContext(_parentctx, _parentState);
					_localctx.a = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
					State = 152;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 153; Match(T__5);
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__9) | (1L << BooleanConstant) | (1L << DecimalConstant) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Identifier))) != 0)) {
						{
						State = 154; _localctx._expression = _localctx._expression = expression(0);
						_localctx._list.Add(_localctx._expression);
						State = 159;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__11) {
							{
							{
							State = 155; Match(T__11);
							State = 156; _localctx._expression = _localctx._expression = expression(0);
							_localctx._list.Add(_localctx._expression);
							}
							}
							State = 161;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 164; Match(T__6);

					                      _localctx.code =  _localctx.a.code + "(" + string.Join(", ", _localctx._list.Select(x => x.code)) + ")";
					                  
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public String code;
		public ExpressionContext a;
		public PrimaryExpressionContext _primaryExpression;
		public IToken op;
		public ExpressionContext b;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(ControlScriptLanguageParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(ControlScriptLanguageParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(ControlScriptLanguageParser.Not, 0); }
		public ITerminalNode Mult() { return GetToken(ControlScriptLanguageParser.Mult, 0); }
		public ITerminalNode Div() { return GetToken(ControlScriptLanguageParser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(ControlScriptLanguageParser.Mod, 0); }
		public ITerminalNode Less() { return GetToken(ControlScriptLanguageParser.Less, 0); }
		public ITerminalNode LessEqual() { return GetToken(ControlScriptLanguageParser.LessEqual, 0); }
		public ITerminalNode Greater() { return GetToken(ControlScriptLanguageParser.Greater, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(ControlScriptLanguageParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(ControlScriptLanguageParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(ControlScriptLanguageParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(ControlScriptLanguageParser.And, 0); }
		public ITerminalNode Xor() { return GetToken(ControlScriptLanguageParser.Xor, 0); }
		public ITerminalNode Or() { return GetToken(ControlScriptLanguageParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__9:
			case BooleanConstant:
			case DecimalConstant:
			case Identifier:
				{
				State = 172; _localctx._primaryExpression = primaryExpression(0);

				            _localctx.code =  _localctx._primaryExpression.code;
				        
				}
				break;
			case Plus:
			case Minus:
			case Not:
				{
				State = 175;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Not))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 176; _localctx.a = expression(8);
				 _localctx.code =  (_localctx.op!=null?_localctx.op.Text:null) + _localctx.a.code; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 216;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 182;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Mult) | (1L << Div) | (1L << Mod))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 183; _localctx.b = expression(8);
						 _localctx.code =  _localctx.a.code + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.b.code; 
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 187;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 188; _localctx.b = expression(7);
						 _localctx.code =  _localctx.a.code + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.b.code; 
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 191;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 192;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 193; _localctx.b = expression(6);
						 _localctx.code =  _localctx.a.code + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.b.code; 
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 197;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 198; _localctx.b = expression(5);
						 _localctx.code =  _localctx.a.code + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.b.code; 
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 202; Match(And);
						State = 203; _localctx.b = expression(4);
						 _localctx.code =  _localctx.a.code + " && " + _localctx.b.code; 
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 207; Match(Xor);
						State = 208; expression(3);
						 _localctx.code =  _localctx.a.code + " ^^ " + _localctx.b.code; 
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.a = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 212; Match(Or);
						State = 213; expression(2);
						 _localctx.code =  _localctx.a.code + " || " + _localctx.b.code; 
						}
						break;
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public String code;
		public IToken id;
		public IToken op;
		public ExpressionContext expr;
		public AssignableExpressionContext a;
		public ITerminalNode Identifier() { return GetToken(ControlScriptLanguageParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignmentExpression);
		int _la;
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; _localctx.id = Match(Identifier);
				State = 222;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << Assign))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 223; _localctx.expr = expression(0);

				            if (char.IsUpper((_localctx.id!=null?_localctx.id.Text:null)[0]))
				                throw new ArgumentException();
				            if (!idTable.Contains((_localctx.id!=null?_localctx.id.Text:null)))
				            {
				                idTable.Add((_localctx.id!=null?_localctx.id.Text:null));
				                _localctx.code =  "var " + (_localctx.id!=null?_localctx.id.Text:null) + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.expr.code;
				            }
				            else
				                _localctx.code =  (_localctx.id!=null?_localctx.id.Text:null) + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.expr.code;
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; _localctx.a = assignableExpression(0);
				State = 227;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << Assign))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 228; _localctx.expr = expression(0);

				            _localctx.code =  _localctx.a.code + " " + (_localctx.op!=null?_localctx.op.Text:null) + " " + _localctx.expr.code;
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public String code;
		public ExpressionContext a;
		public ExpressionContext b;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(T__9);
			State = 234; _localctx.a = expression(0);
			 _localctx.code =  "new[] \u007B " + _localctx.a.code; 
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 236; Match(T__11);
				State = 237; _localctx.b = expression(0);
				 _localctx.code += ", " + _localctx.b.code; 
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245; Match(T__10);
			 _localctx.code += " \u007D"; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public String code;
		public IToken _DecimalConstant;
		public IToken _DecimalConstantSuffix;
		public IToken _BooleanConstant;
		public ITerminalNode DecimalConstant() { return GetToken(ControlScriptLanguageParser.DecimalConstant, 0); }
		public ITerminalNode DecimalConstantSuffix() { return GetToken(ControlScriptLanguageParser.DecimalConstantSuffix, 0); }
		public ITerminalNode BooleanConstant() { return GetToken(ControlScriptLanguageParser.BooleanConstant, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IControlScriptLanguageListener typedListener = listener as IControlScriptLanguageListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_constant);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DecimalConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; _localctx._DecimalConstant = Match(DecimalConstant);
				State = 250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 249; _localctx._DecimalConstantSuffix = Match(DecimalConstantSuffix);
					}
					break;
				}

				            string number = (_localctx._DecimalConstant!=null?_localctx._DecimalConstant.Text:null);
				            if (!number.Contains('.'))
				                number += ".0";
				            if ((_localctx._DecimalConstantSuffix!=null?_localctx._DecimalConstantSuffix.Text:null) == "s")
				                _localctx.code =  "(SampleRate * " + number + ")";
				            else if ((_localctx._DecimalConstantSuffix!=null?_localctx._DecimalConstantSuffix.Text:null) == "b")
				                _localctx.code =  "(SampleRate * 60 / Bpm * " + number + ")";
				            else
				                _localctx.code =  number;
				        
				}
				break;
			case BooleanConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253; _localctx._BooleanConstant = Match(BooleanConstant);

				            _localctx.code =  (_localctx._BooleanConstant!=null?_localctx._BooleanConstant.Text:null);
				        
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return assignableExpression_sempred((AssignableExpressionContext)_localctx, predIndex);
		case 8: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool assignableExpression_sempred(AssignableExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x104', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '!', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '>', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '_', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', 'm', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'q', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'u', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x85', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x88', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x99', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xA0', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\xA3', '\v', '\n', '\x5', '\n', '\xA5', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xA9', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xAC', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xB6', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\xDB', '\n', '\v', '\f', '\v', '\xE', '\v', '\xDE', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xEA', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xF3', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xF6', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xFD', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x102', '\n', 
		'\xE', '\x3', '\xE', '\x2', '\x5', '\x10', '\x12', '\x14', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\b', '\x4', '\x2', '\x17', '\x18', '\x1C', '\x1C', 
		'\x3', '\x2', '\x19', '\x1B', '\x3', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x1D', ' ', '\x3', '\x2', '!', '\"', '\x4', '\x2', '\xF', '\x13', '&', 
		'&', '\x2', '\x117', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'U', '\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x62', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'z', '\x3', '\x2', '\x2', '\x2', '\x12', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x101', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', 
		'\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\b', '\x2', '\x1', '\x2', '#', '\x3', '\x3', '\x2', '\x2', '\x2', '$', 
		'%', '\x5', '\x6', '\x4', '\x2', '%', '&', '\b', '\x3', '\x1', '\x2', 
		'&', '>', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x5', '\b', '\x5', '\x2', 
		'(', ')', '\b', '\x3', '\x1', '\x2', ')', '>', '\x3', '\x2', '\x2', '\x2', 
		'*', '+', '\x5', '\n', '\x6', '\x2', '+', ',', '\b', '\x3', '\x1', '\x2', 
		',', '>', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x5', '\f', '\a', '\x2', 
		'.', '/', '\b', '\x3', '\x1', '\x2', '/', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x31', '\x5', '\xE', '\b', '\x2', '\x31', '\x32', '\b', '\x3', 
		'\x1', '\x2', '\x32', '>', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\x5', '\x16', '\f', '\x2', '\x34', '\x35', '\a', '\x3', '\x2', '\x2', 
		'\x35', '\x36', '\b', '\x3', '\x1', '\x2', '\x36', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\x5', '\x14', '\v', '\x2', '\x38', '\x39', 
		'\a', '\x3', '\x2', '\x2', '\x39', ':', '\b', '\x3', '\x1', '\x2', ':', 
		'>', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', 
		'<', '>', '\b', '\x3', '\x1', '\x2', '=', '$', '\x3', '\x2', '\x2', '\x2', 
		'=', '\'', '\x3', '\x2', '\x2', '\x2', '=', '*', '\x3', '\x2', '\x2', 
		'\x2', '=', '-', '\x3', '\x2', '\x2', '\x2', '=', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x33', '\x3', '\x2', '\x2', '\x2', '=', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '?', '\x43', '\a', '\x4', '\x2', '\x2', '@', 
		'\x42', '\x5', '\x4', '\x3', '\x2', '\x41', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x5', '\x2', '\x2', 'G', 'H', '\b', '\x4', 
		'\x1', '\x2', 'H', '\a', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\'', 
		'\x2', '\x2', 'J', 'K', '\x5', '\x14', '\v', '\x2', 'K', 'L', '\a', '\x3', 
		'\x2', '\x2', 'L', 'M', '\b', '\x5', '\x1', '\x2', 'M', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\a', '\'', '\x2', '\x2', 'O', 'P', '\x5', '\x14', 
		'\v', '\x2', 'P', 'Q', '\a', '\x6', '\x2', '\x2', 'Q', 'R', '\x5', '\x14', 
		'\v', '\x2', 'R', 'S', '\a', '\x3', '\x2', '\x2', 'S', 'T', '\b', '\x5', 
		'\x1', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'N', '\x3', '\x2', '\x2', '\x2', 'V', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\a', '\a', '\x2', '\x2', 'X', 'Y', '\a', 
		'\b', '\x2', '\x2', 'Y', 'Z', '\x5', '\x14', '\v', '\x2', 'Z', '[', '\a', 
		'\t', '\x2', '\x2', '[', '^', '\x5', '\x4', '\x3', '\x2', '\\', ']', '\a', 
		'\n', '\x2', '\x2', ']', '_', '\x5', '\x4', '\x3', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\b', '\x6', '\x1', '\x2', '\x61', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\v', '\x2', '\x2', 
		'\x63', '\x64', '\a', '\b', '\x2', '\x2', '\x64', '\x65', '\x5', '\x14', 
		'\v', '\x2', '\x65', '\x66', '\a', '\t', '\x2', '\x2', '\x66', 'g', '\x5', 
		'\x4', '\x3', '\x2', 'g', 'h', '\b', '\a', '\x1', '\x2', 'h', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\a', '\x6', '\x2', '\x2', 'j', 'l', '\a', 
		'\b', '\x2', '\x2', 'k', 'm', '\x5', '\x16', '\f', '\x2', 'l', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'p', '\a', '\x3', '\x2', '\x2', 'o', 'q', '\x5', 
		'\x14', '\v', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', 
		'\x3', '\x2', '\x2', 's', 'u', '\x5', '\x16', '\f', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\t', '\x2', '\x2', 'w', 'x', '\x5', 
		'\x4', '\x3', '\x2', 'x', 'y', '\b', '\b', '\x1', '\x2', 'y', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\b', '\t', '\x1', '\x2', '{', '|', '\a', 
		'(', '\x2', '\x2', '|', '}', '\b', '\t', '\x1', '\x2', '}', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\f', '\x3', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\f', '\x2', '\x2', '\x80', '\x81', '\x5', '\x14', '\v', '\x2', 
		'\x81', '\x82', '\a', '\r', '\x2', '\x2', '\x82', '\x83', '\b', '\t', 
		'\x1', '\x2', '\x83', '\x85', '\x3', '\x2', '\x2', '\x2', '\x84', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x11', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\b', '\n', '\x1', '\x2', 
		'\x8A', '\x8B', '\x5', '\x10', '\t', '\x2', '\x8B', '\x8C', '\b', '\n', 
		'\x1', '\x2', '\x8C', '\x99', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\x5', '\x1A', '\xE', '\x2', '\x8E', '\x8F', '\b', '\n', '\x1', '\x2', 
		'\x8F', '\x99', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x5', '\x18', 
		'\r', '\x2', '\x91', '\x92', '\b', '\n', '\x1', '\x2', '\x92', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\b', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x14', '\v', '\x2', '\x95', '\x96', '\a', '\t', 
		'\x2', '\x2', '\x96', '\x97', '\b', '\n', '\x1', '\x2', '\x97', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x98', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x93', '\x3', '\x2', '\x2', '\x2', '\x99', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\f', '\x3', '\x2', '\x2', 
		'\x9B', '\xA4', '\a', '\b', '\x2', '\x2', '\x9C', '\xA1', '\x5', '\x14', 
		'\v', '\x2', '\x9D', '\x9E', '\a', '\xE', '\x2', '\x2', '\x9E', '\xA0', 
		'\x5', '\x14', '\v', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\t', '\x2', '\x2', '\xA7', '\xA9', '\b', '\n', '\x1', '\x2', '\xA8', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\x13', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\b', '\v', '\x1', 
		'\x2', '\xAE', '\xAF', '\x5', '\x12', '\n', '\x2', '\xAF', '\xB0', '\b', 
		'\v', '\x1', '\x2', '\xB0', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\t', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x14', '\v', 
		'\n', '\xB3', '\xB4', '\b', '\v', '\x1', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB8', '\f', '\t', '\x2', '\x2', '\xB8', '\xB9', '\t', 
		'\x3', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x14', '\v', '\n', '\xBA', 
		'\xBB', '\b', '\v', '\x1', '\x2', '\xBB', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\f', '\b', '\x2', '\x2', '\xBD', '\xBE', '\t', 
		'\x4', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x14', '\v', '\t', '\xBF', 
		'\xC0', '\b', '\v', '\x1', '\x2', '\xC0', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\f', '\a', '\x2', '\x2', '\xC2', '\xC3', '\t', 
		'\x5', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x14', '\v', '\b', '\xC4', 
		'\xC5', '\b', '\v', '\x1', '\x2', '\xC5', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\f', '\x6', '\x2', '\x2', '\xC7', '\xC8', '\t', 
		'\x6', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\x14', '\v', '\a', '\xC9', 
		'\xCA', '\b', '\v', '\x1', '\x2', '\xCA', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\f', '\x5', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'#', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x14', '\v', '\x6', '\xCE', 
		'\xCF', '\b', '\v', '\x1', '\x2', '\xCF', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\f', '\x4', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'%', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x14', '\v', '\x5', '\xD3', 
		'\xD4', '\b', '\v', '\x1', '\x2', '\xD4', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\f', '\x3', '\x2', '\x2', '\xD6', '\xD7', '\a', 
		'$', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\x14', '\v', '\x4', '\xD8', 
		'\xD9', '\b', '\v', '\x1', '\x2', '\xD9', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\x15', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '(', '\x2', '\x2', '\xE0', 
		'\xE1', '\t', '\a', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x14', '\v', 
		'\x2', '\xE2', '\xE3', '\b', '\f', '\x1', '\x2', '\xE3', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\x10', '\t', '\x2', '\xE5', 
		'\xE6', '\t', '\a', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x14', '\v', 
		'\x2', '\xE7', '\xE8', '\b', '\f', '\x1', '\x2', '\xE8', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\a', '\f', '\x2', '\x2', '\xEC', '\xED', '\x5', 
		'\x14', '\v', '\x2', '\xED', '\xF4', '\b', '\r', '\x1', '\x2', '\xEE', 
		'\xEF', '\a', '\xE', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x14', '\v', 
		'\x2', '\xF0', '\xF1', '\b', '\r', '\x1', '\x2', '\xF1', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\r', '\x2', '\x2', '\xF8', '\xF9', '\b', '\r', '\x1', '\x2', 
		'\xF9', '\x19', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\x15', 
		'\x2', '\x2', '\xFB', '\xFD', '\a', '\x16', '\x2', '\x2', '\xFC', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x102', '\b', '\xE', 
		'\x1', '\x2', '\xFF', '\x100', '\a', '\x14', '\x2', '\x2', '\x100', '\x102', 
		'\b', '\xE', '\x1', '\x2', '\x101', '\xFA', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x1F', '=', '\x43', 'U', '^', 'l', 'p', 't', '\x86', 
		'\x98', '\xA1', '\xA4', '\xAA', '\xB5', '\xDA', '\xDC', '\xE9', '\xF4', 
		'\xFC', '\x101',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
